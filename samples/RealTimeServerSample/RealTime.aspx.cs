using System;
using System.Collections.Generic;
using System.IO;
using ThecallrApi.Objects.RealTime;

/// <summary>
/// This page is an example of Real Time in order to show you one implementation method.
/// You are free to make your own one !
/// </summary>
public partial class RealTimeOut : System.Web.UI.Page
{
    #region Member variables
    /// <summary>
    /// Log manager.
    /// </summary>
    private LogManager LogManager = new LogManager("C:\\temp\\realtime_log.txt"); 
    #endregion

    #region Page events
    /// <summary>
    /// This method is called when the page is loaded.
    /// </summary>
    protected void Page_Load(object sender, EventArgs e)
    {
        // Verify that's a JSON POST
        if (this.Request.HttpMethod == "POST" && this.Request.ContentType.ToLower() == "application/json")
        {
            try
            {
                // Get POST content
                string postContent = null;
                using (StreamReader sr = new StreamReader(this.Request.InputStream))
                {
                    postContent = sr.ReadToEnd();
                }
                // Create an application scenario
                RealTimeApplicationScenario app = this.DefineScenario();
                // Start server process
                RealTimeServer server = new RealTimeServer(postContent);
                server.DeclareApp(app, this.OnStepChange);
                string response = server.Start();
                if (!string.IsNullOrEmpty(response))
                {
                    // Write the JSON response
                    this.Response.ClearHeaders();
                    this.Response.ClearContent();
                    this.Response.ContentType = "application/json";
                    this.Response.Write(response);
                }
            }
            catch (Exception ex)
            {
                // Read your log file to see errors
                this.LogManager.Log(string.Format("[ERROR] {0}", ex.Message));
            }
        }
    } 
    #endregion

    #region Private methods
    /// <summary>
    /// This method defines a scenario.
    /// </summary>
    /// <returns>The RealTime application scenario.</returns>
    private RealTimeApplicationScenario DefineScenario()
    {
        // You must fill in your App ID
        RealTimeApplicationScenario app = new RealTimeApplicationScenario("__APP_ID__");
        // Step 1: play a welcome message
        app.AddPlayStep(1, "TTS|NUANCE_FR_AUDREY|Bonjour et bienvenue sur notre application");
        app.AddStepCommandConnection(1, CommandResults.SUCCESS, 2);
        // Step 2: dial read
        app.AddReadStep(2, 2, 5, "TTS|NUANCE_FR_AUDREY|Veuillez saisir votre code postal", 5000, "zipcode");
        app.AddStepCommandConnection(2, CommandResults.DEFAULT, 3);
        app.AddStepCommandConnection(2, CommandResults.ERROR, 4);
        app.AddStepCommandConnection(2, CommandResults.TIMEOUT, 5);
        // Step 3: play a message that tells you the zip code you enter
        app.AddPlayStep(3, "TTS|NUANCE_FR_AUDREY|Votre code postal est le {zipcode}");
        app.AddStepCommandConnection(3, CommandResults.SUCCESS, 100);
        // Step 4: play an error message
        app.AddPlayStep(4, "TTS|NUANCE_FR_AUDREY|Aïe, une erreur viens de se glisser dans l'application");
        app.AddStepCommandConnection(4, CommandResults.SUCCESS, 100);
        // Step 5: play a goodbye message
        app.AddPlayStep(5, "TTS|NUANCE_FR_AUDREY|Au revoir et à bientôt sur notre super application");
        app.AddStepCommandConnection(5, CommandResults.SUCCESS, 100);
        // Last step: hang up
        app.AddHangupStep(100);
        return app;
    }

    /// <summary>
    /// Callback method called at the end of each step.
    /// <remarks>We use this method to log JSON requests and responses.</remarks>
    /// </summary>
    /// <param name="jsonReceived">The JSON request received.</param>
    /// <param name="jsonResponse">The JSON response sent.</param>
    /// <param name="receivedObject">The request object received.</param>
    /// <param name="responseObject">The response object generated by the server.</param>
    private void OnStepChange(string jsonReceived, string jsonResponse, RealTimeRequest receivedObject, RealTimeResponse responseObject)
    {
        this.LogManager.Log("-------------------------------------------------");
        this.LogManager.Log(string.Format("[REQUEST] {0}", jsonReceived));
        this.LogManager.Log(string.Format("[RESPONSE] {0}", jsonResponse));
        this.LogManager.Log("-------------------------------------------------");
    } 
    #endregion
}