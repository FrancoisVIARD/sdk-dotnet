using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Web.Script.Serialization;
using ThecallrApi.Enums;
using ThecallrApi.Objects.RealTime;

/// <summary>
/// This class gives an example of a Real Time server implementation.
/// </summary>
public class RealTimeServer
{
    #region Delegates
    /// <summary>
    /// Delegate of the callback method called when start process ends.
    /// </summary>
    /// <param name="jsonReceived">The JSON request received.</param>
    /// <param name="jsonResponse">The JSON response sent.</param>
    /// <param name="receivedObject">The request object received.</param>
    /// <param name="responseObject">The response object generated by the server.</param>
    public delegate void RealTimeCallbackFunction(string jsonReceived, string jsonResponse, RealTimeRequest receivedObject, RealTimeResponse responseObject);
    #endregion

    #region Constants
    /// <summary>
    /// A shortcut to the "step" variables collection key.
    /// </summary>
    public static readonly string KEY_STEP = "step";

    /// <summary>
    /// A shortcut to the "step_result_var_name" variables collection key.
    /// </summary>
    public static readonly string KEY_RESULT_VAR_NAME = "step_result_var_name";
    #endregion

    #region Member variables
    /// <summary>
    /// The JSON encoded server request.
    /// </summary>
    public string CurrentJsonRequest { get; private set; }

    /// <summary>
    /// An object representing the received JSON server request decoded.
    /// </summary>
    public RealTimeRequest CurrentRequestObject { get; private set; }

    /// <summary>
    /// The JSON encoded server response.
    /// </summary>
    public string CurrentJsonResponse { get; private set; }

    /// <summary>
    /// An object representing the JSON reponse sent.
    /// </summary>
    public RealTimeResponse CurrentResponseObject { get; private set; }

    /// <summary>
    /// A dictionary maintaining all the Real Time Applications that you define.
    /// </summary>
    public Dictionary<string, RealTimeApplicationScenario> Apps { get; private set; }

    /// <summary>
    /// A dictionary maintaining all the callbacks method per application.
    /// </summary>
    public Dictionary<string, RealTimeCallbackFunction> AppCallbacks { get; private set; }

    /// <summary>
    /// Object used to Serialize and Deserialize JSON.
    /// </summary>
    private JavaScriptSerializer JsSerializer { get; set; }

    /// <summary>
    /// Random number generator.
    /// </summary>
    private Random Random { get; set; }
    #endregion

    #region Constructors
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="json">JSON encoded server request.</param>
    public RealTimeServer(string json)
    {
        // Member variables initialization
        this.CurrentJsonRequest = json;
        this.Random = new Random();
        this.Apps = new Dictionary<string, RealTimeApplicationScenario>();
        this.AppCallbacks = new Dictionary<string, RealTimeCallbackFunction>();
        // Initialize the JSON Serializer with our customer converter
        this.JsSerializer = new JavaScriptSerializer();
        this.JsSerializer.RegisterConverters(new[] { new RealTimeResponseJavascriptConverter() });
    } 
    #endregion

    #region Public methods
    /// <summary>
    /// This method allows yout to start the Real Time server process.
    /// <remarks>
    /// The different steps are :
    /// - the JSON request parsing
    /// - the request execution
    /// - the response generation
    /// </remarks>
    /// </summary>
    /// <returns>The JSON encoded response, or null if no reponse.</returns>
    public string Start()
    {
        // JSON request analysis
        this.ParseRequest();
        // Request processing
        this.ExecuteRequest();
        return this.CurrentJsonResponse;
    }

    /// <summary>
    /// This method allows you to define a Real Time application in order to integrate it in the server execution process.
    /// </summary>
    /// <param name="app">The Real Time application to integrate in the server execution process.</param>
    /// <param name="callback">The callback method to invoke at the end of start process if defined.</param>
    public void DeclareApp(RealTimeApplicationScenario app, RealTimeCallbackFunction callback = null)
    {
        if (app != null)
        {
            if (!this.Apps.ContainsKey(app.AppId))
                this.Apps.Add(app.AppId, app);
            if (!this.AppCallbacks.ContainsKey(app.AppId))
                this.AppCallbacks.Add(app.AppId, callback);
        }
    }
    #endregion

    #region Private methods
    /// <summary>
    /// This methods parses the JSON request and creates an RealTimeRequestObject.
    /// </summary>
    private void ParseRequest()
    {
        try
        {
            // We use the JavascriptSerializer to Serialize and Deserialize JSON you can find it in System.Web.Script.Serialization)
            this.CurrentRequestObject = this.JsSerializer.Deserialize<RealTimeRequest>(this.CurrentJsonRequest);
        }
        catch (Exception ex)
        {
            throw new System.Exception(string.Format("An error occured while deserializing: {0}. Error: {1}.", this.CurrentJsonRequest, ex.Message));
        }
    }

    /// <summary>
    /// This method executes the application step correponding to the request.
    /// </summary>
    private void ExecuteRequest()
    {
        // Define the response object
        this.CurrentResponseObject = null;
        if (this.CurrentRequestObject != null)
        {
            // Request analysis and treatment depending on application
            if (this.Apps.ContainsKey(this.CurrentRequestObject.app))
            {
                Step nextStep = null;
                // Get the application
                RealTimeApplicationScenario app = this.Apps[this.CurrentRequestObject.app];
                // Save values
                object step = this.CurrentRequestObject.variables != null && this.CurrentRequestObject.variables.ContainsKey(KEY_STEP) ? this.CurrentRequestObject.variables[KEY_STEP] : null;
                string resultVarName = this.CurrentRequestObject.variables != null && this.CurrentRequestObject.variables.ContainsKey(KEY_RESULT_VAR_NAME) ? this.CurrentRequestObject.variables[KEY_RESULT_VAR_NAME].ToString() : null;
                // Error management
                if (!string.IsNullOrEmpty(this.CurrentRequestObject.command_error))
                {
                    if (step != null)
                        nextStep = app.GetNextStep((int)step, this.CurrentRequestObject.command_result);
                    else
                        nextStep = app.GetNextStep(0);
                    // Replace previous step values with those of error step
                    this.CurrentRequestObject.variables[KEY_STEP] = nextStep.StepId;
                    this.CurrentRequestObject.command_result = CommandResults.ERROR;
                }
                // Call status management
                if (this.CurrentRequestObject.call_status == RealTimeCallStatuses.INCOMING_CALL || this.CurrentRequestObject.call_status == RealTimeCallStatuses.UP)
                {
                    if (step != null)
                        nextStep = app.GetNextStep((int)step, this.CurrentRequestObject.command_result);
                    else
                        nextStep = app.GetNextStep(0);
                    if (!string.IsNullOrEmpty(resultVarName))
                        this.CurrentRequestObject.variables.Remove(KEY_RESULT_VAR_NAME);
                    // Retrieve the response according to the current step
                    this.CurrentResponseObject = nextStep.Response;
                    // Generate the command ID
                    this.CurrentResponseObject.CommandId = this.Random.Next(1, int.MaxValue);
                    // Set variables
                    this.CurrentResponseObject.Variables = this.CurrentRequestObject.variables;
                    if (!string.IsNullOrEmpty(nextStep.ResultVarName))
                        this.CurrentResponseObject.Variables.Add(KEY_RESULT_VAR_NAME, nextStep.ResultVarName);
                    this.CurrentResponseObject.Variables[KEY_STEP] = nextStep.StepId;
                    // Replace resultaVarName in parameters collection if set
                    if (!string.IsNullOrEmpty(resultVarName) && this.CurrentResponseObject.Params != null)
                    {
                        List<string> keys = new List<string>(this.CurrentResponseObject.Params.Keys);
                        foreach (string key in keys)
	                    {
                            if (this.CurrentResponseObject.Params[key] is string)
                                // We replace "{step_result_var_name}" with the value contained in CurrentRequestObject.command_result
                                this.CurrentResponseObject.Params[key] = Regex.Replace((string)this.CurrentResponseObject.Params[key], string.Format("{{{0}}}", resultVarName), this.CurrentRequestObject.command_result);
	                    }
                    }
                    // JSON serialization
                    this.CurrentJsonResponse = this.JsSerializer.Serialize(this.CurrentResponseObject);
                }
                // Call the callback method if defined
                if (this.AppCallbacks.ContainsKey(app.AppId))
                    this.AppCallbacks[app.AppId].Invoke(this.CurrentJsonRequest, this.CurrentJsonResponse, this.CurrentRequestObject, this.CurrentResponseObject);
            }
            else
                throw new System.Exception(string.Format("The application ID '{0}' is not set up in the server.", this.CurrentRequestObject.app));
        }
        else
            throw new System.Exception("Current request object is null.");
    }
    #endregion
}